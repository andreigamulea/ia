<h1>Testare Conexiune Debian</h1>


<!-- Afișare cheie de criptare (doar pentru testare) -->
<p>Cheia de criptare: <%= @encryption_key %></p>

<!-- Player Video.js -->
<video id="my-video" class="video-js vjs-default-skin" controls preload="auto" crossorigin="anonymous">
    <source src="https://ayush.go.ro/output.m3u8" type="application/vnd.apple.mpegurl">
</video>

<!-- Include stilurile și scripturile Video.js -->
<script src="https://cdn.jsdelivr.net/npm/videojs-http-streaming@latest/dist/videojs-http-streaming.min.js"></script>
<link href="https://vjs.zencdn.net/7.20.3/video-js.css" rel="stylesheet" />
<script src="https://vjs.zencdn.net/7.20.3/video.js"></script>

<!-- Inițializează player-ul Video.js pentru fișierul HLS -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    var player = videojs('my-video', {
        controls: true,
        preload: 'auto',
        techOrder: ['html5'],
        html5: {
            vhs: {
                withCredentials: false  // Asigură-te că cererile nu au credențiale
            }
        }
    });

    // Setează sursa fluxului video după inițializarea playerului
    player.ready(function() {
        player.src({
            src: 'https://ayush.go.ro/output.m3u8',
            type: 'application/vnd.apple.mpegurl'
        });
        console.log("Sursa video a fost setată.");
    });

    // Debugging: Afișează mesaje în consolă pentru diagnosticare
    player.on('error', function() {
        var error = player.error();
        console.error('Eroare apărută în player:', error.code, error.message);
    });

    player.on('loadedmetadata', function() {
        console.log("Fișierul M3U8 a fost încărcat cu succes.");
    });

    player.on('loadeddata', function() {
        console.log("Segmentul curent de fișier .ts a fost încărcat.");
    });

    player.on('waiting', function() {
        console.log("Așteptând următorul segment .ts.");
    });

    player.on('canplay', function() {
        console.log("Playerul este gata să redea video.");
    });

    player.on('playing', function() {
        console.log("Video-ul este redat.");
    });

    player.on('stalled', function() {
        console.log("Playerul așteaptă date suplimentare și a rămas blocat.");
    });

    player.on('pause', function() {
        console.log("Video-ul a fost întrerupt.");
    });

    player.on('ended', function() {
        console.log("Video-ul s-a terminat.");
    });
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const allowedOrigins = ['https://ayushcell.ro']; // Origini permise

    // Detectează cereri de tip blob și extensii de browser
    if (window.location.protocol === 'blob:' || window.location.origin.startsWith('chrome-extension:')) {
        console.warn('Acces restricționat. Extensiile de browser nu sunt permise.');
        window.location.href = '/acces-restrictionat'; // Redirecționează către o pagină de eroare sau de avertizare
    }

    // Monitorizează cererile de tip Fetch și XHR
    const originalFetch = window.fetch;
    window.fetch = function(...args) {
        const url = new URL(args[0]);
        if (!allowedOrigins.includes(url.origin) && (url.protocol === 'blob:' || url.origin.startsWith('chrome-extension:'))) {
            console.warn('Cerere de tip blob sau de la extensie blocată.');
            return Promise.reject(new Error('Acces restricționat.'));
        }
        return originalFetch.apply(this, args);
    };

    const originalXhrOpen = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function(method, url) {
        if (url.startsWith('blob:') || url.startsWith('chrome-extension:')) {
            console.warn('Acces restricționat pentru cererile de tip blob.');
            this.abort();
            return;
        }
        originalXhrOpen.apply(this, arguments);
    };
});
</script>